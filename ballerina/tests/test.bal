// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerina/oauth2;
import ballerina/test;

final string serviceUrl = isLiveServer ? "https://api.hubapi.com/crm/v4" : "http://localhost:9090";

configurable boolean isLiveServer = ?;
configurable string clientId = ?;
configurable string clientSecret = ?;
configurable string refreshToken = ?;

final Client hubspotAssociations = check initClient();

isolated function initClient() returns Client|error {
    if isLiveServer {
        OAuth2RefreshTokenGrantConfig auth = {
            clientId: clientId,
            clientSecret: clientSecret,
            refreshToken: refreshToken,
            credentialBearer: oauth2:POST_BODY_BEARER
        };
        return check new ({auth}, serviceUrl);
    }
    return check new ({
        auth: {
            token: "test-token"
        }
    }, serviceUrl);
}

final string fromObjectType = "deals";
final string toObjectType = "companies";
final string fromObjectId = "41479955131";
final string toObjectId = "38056537829";
final int:Signed32 userId = 77406593;

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testGetAssociationsList() returns error? {
    CollectionResponseMultiAssociatedObjectWithLabelForwardPaging response = check hubspotAssociations->/objects/[fromObjectType]/[fromObjectId]/associations/[toObjectType].get();

    test:assertTrue(response.results.length() > 0, msg = "Expected at least one association, but found none.");

}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testCreateDefaultAssociation() returns error? {
    BatchResponsePublicDefaultAssociation response = check hubspotAssociations->/associations/[fromObjectType]/[toObjectType]/batch/associate/default.post(
        {
            inputs: [
                {
                    'from: {id: fromObjectId},
                    to: {id: toObjectId}
                }
            ]
        }
    );

    test:assertTrue(response.results.length() > 0, msg = "Expected at least one default association to be created, but none were found.");

}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testCreateCustomAssociation() returns error? {
    BatchResponseLabelsBetweenObjectPair|BatchResponseLabelsBetweenObjectPairWithErrors response = check hubspotAssociations->/associations/[fromObjectType]/[toObjectType]/batch/create.post({
        inputs: [
            {
                types: [
                    {
                        associationCategory: "USER_DEFINED",
                        associationTypeId: 9
                    }
                ],
                'from: {id: fromObjectId},
                to: {id: toObjectId}
            }
        ]
    });

    test:assertTrue(response.results.length() > 0,
            msg = "Expected at least one association to be created, but none were found.");

}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testReadAssociation() returns error? {
    BatchResponsePublicAssociationMultiWithLabel response = check hubspotAssociations->/associations/[fromObjectType]/[toObjectType]/batch/read.post(
        {
            inputs: [
                {
                    id: fromObjectId
                }
            ]
        }
    );

    test:assertTrue(response.results.length() > 0, msg = "Expected at least one association for the given object, but no associations were found.");
}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testReport() returns error? {
    ReportCreationResponse response = check hubspotAssociations->/associations/usage/high\-usage\-report/[userId].post({});

    test:assertEquals(response.userId, userId, msg = string `Expected userId to be ${userId.toString()}, but got ${response.userId.toString()}`);

}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testCreateDefaultAssociationType() returns error? {
    BatchResponsePublicDefaultAssociation response = check hubspotAssociations->/objects/[fromObjectType]/[fromObjectId]/associations/default/[toObjectType]/[toObjectId].put({});

    test:assertTrue(response.results.length() > 0, msg = "Expected at least one default association to be created, but found none.");
}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testCreateAssociationLabel() returns error? {
    LabelsBetweenObjectPair response = check hubspotAssociations->/objects/[fromObjectType]/[fromObjectId]/associations/[toObjectType]/[toObjectId].put(
        [
            {
                "associationCategory": "USER_DEFINED",
                "associationTypeId": 9
            }
        ]
    );

    test:assertEquals(response.fromObjectId.toString(), fromObjectId, msg = string `Expected toObjectId to be ${toObjectId.toString()} but got ${response.toObjectId.toString()}`);
    test:assertEquals(response.toObjectId.toString(), toObjectId, msg = string `Expected toObjectId to be ${toObjectId.toString()}, but got ${response.toObjectId.toString()}`);
}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testRemoveAssociationBetweenObject() returns error? {
    http:Response response = check hubspotAssociations->/associations/[fromObjectType]/[toObjectType]/batch/archive.post({
        inputs: [
            {
                'from: {id: fromObjectId},
                to: [
                    {
                        id: toObjectId
                    }
                ]
            }
        ]
    });

    test:assertEquals(response.statusCode, 204,
            msg = string `Expected status code 204 but got ${response.statusCode}`);

}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testDeleteSpecificLables() returns error? {
    http:Response response = check hubspotAssociations->/associations/[fromObjectType]/[toObjectType]/batch/labels/archive.post({
        inputs: [
            {
                types: [
                    {
                        associationCategory: "HUBSPOT_DEFINED",
                        associationTypeId: 9
                    }
                ],
                'from: {id: fromObjectId},
                to: {id: toObjectId}
            }
        ]
    });

    test:assertEquals(response.statusCode, 204,
            msg = string `Expected status code 204 but got ${response.statusCode}`);

}

@test:Config {
    groups: ["live_tests", "mock_tests"]
}
isolated function testDeleteAllAssociations() returns error? {
    http:Response response = check hubspotAssociations->/objects/[toObjectType]/[toObjectId]/associations/[fromObjectType]/[fromObjectId].delete();

    test:assertEquals(response.statusCode, 204,
            msg = string `Expected status code 204 but got ${response.statusCode}`);

}
